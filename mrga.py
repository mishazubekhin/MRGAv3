import datetime
import sqlite3
import time

from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, CallbackQuery, Message, \
    InputMediaPhoto
from pyrogram import Client, filters, enums
import os
from dotenv import load_dotenv
from blocked_word_func import blocked_word, condition_filter, photo_filter_custom, not_media_group, time_date_check, \
    detect_photo
from data_base_users import DB_poll
from date_base_polls import User_polls

load_dotenv()
api_id = os.getenv('ID_TG')
api_hash = os.getenv('HASH_TG')
bot_token = os.getenv('TOKEN_TG')

app = Client("mrga", api_id=api_id, api_hash=api_hash, bot_token=bot_token)
GROUP = 'MakeRussiaGreatAgain_official'

WELCOME_MESSAGE = '–î–æ—Å—Ç—É–ø–Ω–∞—è –¥–µ–º–æ–∫—Ä–∞—Ç–∏—è —Å–µ–π—á–∞—Å!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–µ–ª–∞—Ç—å –∂–∏–∑–Ω—å –ª—É—á—à–µ –Ω–∞–∂–º–∏—Ç–µ /start'
WELCOME_MESSAGE_AFTER_START = '''
 –í—ã —Å—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≤ –∂–∏–∑–Ω–∏ –æ–±—â–µ—Å—Ç–≤–∞!\n
 –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ —Ç—ã!\n 
 –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –¥–æ–º"\n
 –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"\n
 –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –ø–µ—Ç–∏—Ü–∏–∏"\n
 –ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –ß–¢–û –í–û–û–ë–©–ï –ü–†–û–ò–°–•–û–î–ò–¢, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" '''

WELCOME_MESSAGE_BUTTONS = [
    [InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –¥–æ–º', callback_data='choose_home')],
    [InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', callback_data='create_universal_vote')],
    [InlineKeyboardButton('–ú–æ–∏ –ø–µ—Ç–∏—Ü–∏–∏', callback_data='my_petition')],
    [InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ', url='https://t.me/MakeRussiaGreatAgain_official/19')]
]


@app.on_message(filters.command('start'))
async def welcome_start(app: Client, message: Message):
    db_vote = sqlite3.connect("tguser.db")
    cur_vote = db_vote.cursor()
    cur_vote.execute(f"UPDATE polls SET condition = ('start') WHERE user_id = ('{message.from_user.id}');")
    db_vote.commit()
    cur_vote.execute(f"INSERT OR IGNORE INTO polls (user_id) VALUES ('{message.from_user.id}')")
    db_vote.commit()
    db_vote.close()
    reply_markup = InlineKeyboardMarkup(WELCOME_MESSAGE_BUTTONS)
    await message.reply(text=WELCOME_MESSAGE_AFTER_START, reply_markup=reply_markup, disable_web_page_preview=True)
    return


region_list = []
with open('list_region_car.txt', encoding='utf-8') as file:
    for region in file:
        region = region.replace('\n', '')
        region_list.append(region)


@app.on_callback_query(group=3)
async def home(app: Client, answer_message: CallbackQuery):
    if answer_message.data == 'home':
        db_poll = DB_poll()
        db_poll.update_condition(stream="start", user_id=answer_message.from_user.id)
        await answer_message.edit_message_text(text=WELCOME_MESSAGE_AFTER_START,
                                               reply_markup=InlineKeyboardMarkup(WELCOME_MESSAGE_BUTTONS),
                                               disable_web_page_preview=True)
        return
    return


@app.on_callback_query(condition_filter(['start']), group=1)
async def create_vote(app: Client, answer_message: CallbackQuery):
    if answer_message.data == 'my_petition':
        user_polls = User_polls()
        poll_and_photo = user_polls.return_poll(answer_message.from_user.id)
        poll_list = poll_and_photo[0]
        photo_list = poll_and_photo[1]
        if user_polls.return_user_id(answer_message.from_user.id):
            await app.send_message(answer_message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ç–∏—Ü–∏–π!üôÑ")
        else:
            for (i, n) in zip(poll_list, photo_list):
                if n != "None":
                    await app.send_photo(answer_message.from_user.id, photo=n)
                await app.forward_messages(answer_message.from_user.id, answer_message.from_user.id,
                                           message_ids=i)
                time.sleep(3)
        return
    if answer_message.data == 'create_universal_vote':
        db_poll = DB_poll()
        if db_poll.check_date(user_id=answer_message.from_user.id) == datetime.datetime.now().strftime("%Y%m%d"):
            await app.send_message(chat_id=answer_message.from_user.id,
                                   text="–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ç–∏—Ü–∏–∏ –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏",
                                   disable_web_page_preview=True)
        else:
            db_poll.update_condition(stream="command_poll", user_id=answer_message.from_user.id)
            CREATE_POLL_MESSAGE = '–ò–∑–ª–æ–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è –ø—Ä–æ–±–ª–µ–º—É, —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'
            reply_markup_tutorial = [
                [InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url='https://t.me/MakeRussiaGreatAgain_official/19')],
                [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]
            ]
            await app.send_message(chat_id=answer_message.from_user.id, text=CREATE_POLL_MESSAGE,
                                   reply_markup=InlineKeyboardMarkup(reply_markup_tutorial),
                                   disable_web_page_preview=True)

        return
    if answer_message.data == 'choose_home':
        db_poll = DB_poll()
        db_poll.update_condition(stream="choose_home", user_id=answer_message.from_user.id)
        MESSAGE_CHOOSE_REGION = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞!\n–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –í–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ' \
                                '"–°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤"'
        reply_choose_region = [
            [InlineKeyboardButton('–°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤', url='https://www.consultant.ru/document/cons_doc_LAW_108669'
                                                         '/88a12659e7cc781c56303430d98ae6c8a683892a/')],
            [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É', callback_data='home')]
        ]
        await app.send_message(text=MESSAGE_CHOOSE_REGION, chat_id=answer_message.from_user.id,
                               reply_markup=InlineKeyboardMarkup(reply_choose_region))

        @app.on_message(condition_filter(["choose_home"]), group=1)
        async def choose_region(app: Client, message: Message):
            if message.text in region_list:
                db_vote = sqlite3.connect("tguser.db")
                cur_vote = db_vote.cursor()
                cur_vote.execute(
                    f"UPDATE polls set region = ('{message.text}') WHERE user_id = ('{message.from_user.id}')")
                db_vote.commit()
                cur_vote.execute(f"UPDATE polls SET condition = ('start') WHERE user_id = ('{message.from_user.id}');")
                db_vote.commit()
                db_vote.close()
                go_home = [
                    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É', callback_data='home')],
                    [InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω', callback_data='choose_home')]
                ]
                await app.send_message(chat_id=message.from_user.id,
                                       text='–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–¢–µ–ø–µ—Ä—å —Ç—ã —Å–º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö —Å–≤–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞!',
                                       reply_markup=InlineKeyboardMarkup(go_home))
                return
            else:
                await app.send_message(chat_id=message.from_user.id, text='–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞!',
                                       reply_markup=InlineKeyboardMarkup(reply_choose_region))
                return

        return
    return


@app.on_message(filters.text & condition_filter(["command_poll"]), group=2)
async def poll_creating(app: Client, message: Message):
    db_poll = DB_poll()
    if db_poll.simple_condition(message.from_user.id) != 'null':
        if time_date_check(message.from_user.id):
            if await blocked_word(app, message) is False:
                input_message = message.text
                msg_poll = await app.send_poll(chat_id=message.from_user.id, is_anonymous=False,
                                               question=input_message,
                                               options=['–°–æ–≥–ª–∞—Å–µ–Ω', "–í–æ–∑—Ä–∞–∂–∞—é",
                                                        "–ù–µ –º–æ–≥—É –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É"])
                msg_poll_id = msg_poll.id
                db_vote = sqlite3.connect("tguser.db")
                cur_vote = db_vote.cursor()
                cur_vote.execute(
                    f"UPDATE polls set photos = (Null),"
                    f"second_photo = (Null),"
                    f"third_photo = (Null),"
                    f"forth_photo = (Null),"
                    f"fiveth_photo = (Null),"
                    f"sixth_photo = (Null),"
                    f"seventh_photo = (Null)"
                    f"WHERE user_id = ('{message.from_user.id}')")
                cur_vote.execute(
                    f"UPDATE polls SET condition = ('check_create') WHERE user_id = ('{message.from_user.id}');")
                cur_vote.execute(
                    f"UPDATE polls set poll_id = ('{msg_poll_id}') WHERE user_id = ('{message.from_user.id}')")
                db_vote.commit()
                db_vote.close()
                CHECK_FOR_CORRECT = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–µ—Ä–Ω–æ –ª–∏ –≤—Å–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–ª–æ–∂–∏—Ç—å?!\n–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ ' \
                                    '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ, –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–æ–∫, ' \
                                    '–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–•–æ—á—É –Ω–µ–º–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!"'
                CHECK_CORRECT_BUTTONS = [
                    [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –ø–µ—Ç–∏—Ü–∏–∏', callback_data='add_photo')],
                    [InlineKeyboardButton('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', callback_data='all_right')],
                    [InlineKeyboardButton('–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å!', callback_data='make_edit')],
                    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]
                ]
                reply_markup_1 = InlineKeyboardMarkup(CHECK_CORRECT_BUTTONS)
                await app.send_message(chat_id=message.from_user.id, text=CHECK_FOR_CORRECT,
                                       reply_markup=reply_markup_1)

            else:
                CREATE_POLL_MESSAGE = '–ò–∑–ª–æ–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è –ø—Ä–æ–±–ª–µ–º—É, —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'
                reply_markup_tutorial = [
                    [InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url='https://t.me/MakeRussiaGreatAgain_official/19')],
                    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]
                ]
                await app.send_message(chat_id=message.from_user.id, text=CREATE_POLL_MESSAGE,
                                       reply_markup=InlineKeyboardMarkup(reply_markup_tutorial),
                                       disable_web_page_preview=True)
                return
        else:
            await app.send_message(chat_id=message.from_user.id,
                                   text="–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ç–∏—Ü–∏–∏ –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏!"
                                        "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –ø–æ–∫–∞ –ø–æ–ª—É—á—à–µ!",
                                   disable_web_page_preview=True)
        return
    else:
        await app.send_message(chat_id=message.from_user.id,
                                   text="–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω!",
                                   disable_web_page_preview=True)


@app.on_callback_query(condition_filter(['check_create', 'add_first_photo', 'add_second_photo', 'add_third_photo',
                                         'add_forth_photo', 'add_fiveth_photo', 'add_sixth_photo',
                                         'add_seventh_photo']), group=2)
def improve_vote(app: Client, answer_message: CallbackQuery):
    if answer_message.data == 'all_right':
        app.send_chat_action(answer_message.from_user.id, enums.ChatAction.IMPORT_HISTORY)
        db_poll = DB_poll()
        message_poll_id = db_poll.return_poll_id(user_id=answer_message.from_user.id)
        message_photo_id = db_poll.return_photos(answer_message.from_user.id)
        db_poll.update_date(user_id=answer_message.from_user.id)
        user_polls = User_polls()
        user_polls.add_poll(user_id=answer_message.from_user.id, poll_id=message_poll_id,
                            photo=message_photo_id)
        enum_user_id = db_poll.return_user_id(user_id=answer_message.from_user.id)
        ADD_PHOTO = [
            [InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')],
        ]
        reply_markup_back_home = InlineKeyboardMarkup(ADD_PHOTO)
        if db_poll.simple_condition(answer_message.from_user.id) == "check_create":
            db_poll.update_condition('start', answer_message.from_user.id)
            for id_user in enum_user_id:
                app.forward_messages(id_user, answer_message.from_user.id,
                                     message_ids=message_poll_id)
            app.send_message(answer_message.from_user.id, '–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!',
                             reply_markup=reply_markup_back_home,
                             disable_web_page_preview=True)
            return
        if db_poll.simple_condition(answer_message.from_user.id) == "add_first_photo":
            db_poll.update_condition('start', answer_message.from_user.id)
            for id_user in enum_user_id:
                app.send_photo(id_user, photo=message_photo_id, protect_content=True)
                app.forward_messages(id_user, answer_message.from_user.id,
                                     message_ids=db_poll.return_poll_id(
                                         user_id=answer_message.from_user.id))
            app.send_message(answer_message.from_user.id, '–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!',
                             reply_markup=reply_markup_back_home,
                             disable_web_page_preview=True)
            return
        if db_poll.simple_condition(answer_message.from_user.id) == "add_second_photo":
            db_poll.update_condition('start', answer_message.from_user.id)
            list_photo_users = [InputMediaPhoto(db_poll.return_photos(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_second_photo(answer_message.from_user.id))
                                ]
            for id_user in enum_user_id:
                app.send_media_group(id_user, media=list_photo_users,
                                     protect_content=True)
                app.forward_messages(id_user, answer_message.from_user.id,
                                     message_ids=db_poll.return_poll_id(
                                         user_id=answer_message.from_user.id))
            app.send_message(answer_message.from_user.id, '–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!',
                             reply_markup=reply_markup_back_home,
                             disable_web_page_preview=True)
            return
        if db_poll.simple_condition(answer_message.from_user.id) == "add_third_photo":
            db_poll.update_condition('start', answer_message.from_user.id)
            list_photo_users = [InputMediaPhoto(db_poll.return_photos(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_second_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_third_photo(answer_message.from_user.id))
                                ]
            for id_user in enum_user_id:
                app.send_media_group(id_user, media=list_photo_users,
                                     protect_content=True)
                app.forward_messages(id_user, answer_message.from_user.id,
                                     message_ids=db_poll.return_poll_id(
                                         user_id=answer_message.from_user.id))
            app.send_message(answer_message.from_user.id, '–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!',
                             reply_markup=reply_markup_back_home,
                             disable_web_page_preview=True)
            return
        if db_poll.simple_condition(answer_message.from_user.id) == "add_forth_photo":
            db_poll.update_condition('start', answer_message.from_user.id)
            list_photo_users = [InputMediaPhoto(db_poll.return_photos(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_second_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_third_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_forth_photo(answer_message.from_user.id))
                                ]
            for id_user in enum_user_id:
                app.send_media_group(id_user, media=list_photo_users,
                                     protect_content=True)
                app.forward_messages(id_user, answer_message.from_user.id,
                                     message_ids=db_poll.return_poll_id(
                                         user_id=answer_message.from_user.id))
            app.send_message(answer_message.from_user.id, '–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!',
                             reply_markup=reply_markup_back_home,
                             disable_web_page_preview=True)
            return
        if db_poll.simple_condition(answer_message.from_user.id) == "add_fiveth_photo":
            db_poll.update_condition('start', answer_message.from_user.id)
            list_photo_users = [InputMediaPhoto(db_poll.return_photos(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_second_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_third_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_forth_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_fiveth_photo(answer_message.from_user.id)),
                                ]
            for id_user in enum_user_id:
                app.send_media_group(id_user, media=list_photo_users,
                                     protect_content=True)
                app.forward_messages(id_user, answer_message.from_user.id,
                                     message_ids=db_poll.return_poll_id(
                                         user_id=answer_message.from_user.id))
            app.send_message(answer_message.from_user.id, '–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!',
                             reply_markup=reply_markup_back_home,
                             disable_web_page_preview=True)
            return
        if db_poll.simple_condition(answer_message.from_user.id) == "add_sixth_photo":
            db_poll.update_condition('start', answer_message.from_user.id)
            list_photo_users = [InputMediaPhoto(db_poll.return_photos(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_second_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_third_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_forth_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_fiveth_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_sixth_photo(answer_message.from_user.id)),
                                ]
            for id_user in enum_user_id:
                app.send_media_group(id_user, media=list_photo_users,
                                     protect_content=True)
                app.forward_messages(id_user, answer_message.from_user.id,
                                     message_ids=db_poll.return_poll_id(
                                         user_id=answer_message.from_user.id))
            app.send_message(answer_message.from_user.id, '–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!',
                             reply_markup=reply_markup_back_home,
                             disable_web_page_preview=True)
            return
        if db_poll.simple_condition(answer_message.from_user.id) == "add_seventh_photo":
            db_poll.update_condition('start', answer_message.from_user.id)
            list_photo_users = [InputMediaPhoto(db_poll.return_photos(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_second_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_third_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_forth_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_fiveth_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_sixth_photo(answer_message.from_user.id)),
                                InputMediaPhoto(db_poll.return_seventh_photo(answer_message.from_user.id))]
            for id_user in enum_user_id:
                app.send_media_group(id_user, media=list_photo_users,
                                     protect_content=True)
                app.forward_messages(id_user, answer_message.from_user.id,
                                     message_ids=db_poll.return_poll_id(
                                         user_id=answer_message.from_user.id))
            app.send_message(answer_message.from_user.id, '–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!',
                             reply_markup=reply_markup_back_home,
                             disable_web_page_preview=True)
            return
    elif answer_message.data == 'add_photo':
        db_poll = DB_poll()
        db_poll.update_condition(stream="add_first_photo", user_id=answer_message.from_user.id)
        ADD_PHOTO = [
            [InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='make_edit')],
            [InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]
        ]
        reply_markup_back_home = InlineKeyboardMarkup(ADD_PHOTO)
        app.send_message(answer_message.from_user.id, '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!',
                         reply_markup=reply_markup_back_home,
                         disable_web_page_preview=True)

        @app.on_message(filters.photo & condition_filter(["add_first_photo"]) & not_media_group())
        async def save_photos(app: Client, photo: Message):
            await app.send_chat_action(photo.from_user.id, enums.ChatAction.UPLOAD_PHOTO)
            if photo_filter_custom(photo) is True:
                time.sleep(2)
                db_vote = sqlite3.connect("tguser.db")
                cur_vote = db_vote.cursor()
                cur_vote.execute(
                    f"UPDATE polls set photos = ('{photo.photo.file_id}'),"
                    f"second_photo = (Null),"
                    f"third_photo = (Null),"
                    f"forth_photo = (Null),"
                    f"fiveth_photo = (Null),"
                    f"sixth_photo = (Null),"
                    f"seventh_photo = (Null)"
                    f"WHERE user_id = ('{photo.from_user.id}')")
                db_vote.commit()
                db_vote.close()
                await app.delete_messages(chat_id=photo.from_user.id, message_ids=photo.id)
                db_poll = DB_poll()
                return_photo = db_poll.return_photos(user_id=photo.from_user.id)
                CHECK_CORRECT_PHOTOS = [
                    [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!', callback_data='add_second_photo')],
                    [InlineKeyboardButton('–í—Å–µ –≥–æ—Ç–æ–≤–æ! –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å!', callback_data='all_right')],
                    [InlineKeyboardButton('–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!',
                                          callback_data='make_edit')],
                    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]]
                await app.send_photo(photo.from_user.id, return_photo)
                await app.forward_messages(photo.from_user.id, photo.from_user.id,
                                           db_poll.return_poll_id(user_id=photo.from_user.id))
                await app.send_message(photo.from_user.id, "–û–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—Å–µ–≥–¥–∞ –º–∞–ª–æ..",
                                       reply_markup=InlineKeyboardMarkup(CHECK_CORRECT_PHOTOS))
            else:
                time.sleep(2)
                await app.send_message(photo.from_user.id,
                                       "–ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è, –Ω–æ —Å–µ–π—á–∞—Å –æ–Ω "
                                       "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –í–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüôä")

        return
    elif answer_message.data == 'add_second_photo':
        db_poll = DB_poll()
        db_poll.update_condition(stream="add_second_photo", user_id=answer_message.from_user.id)
        ADD_PHOTO = [
            [InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞', callback_data='make_edit')],
            [InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]
        ]
        reply_markup_back_home = InlineKeyboardMarkup(ADD_PHOTO)
        app.send_message(answer_message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!',
                         reply_markup=reply_markup_back_home,
                         disable_web_page_preview=True)

        @app.on_message(filters.photo & condition_filter(["add_second_photo"]) & not_media_group())
        async def save_photos(app: Client, photo: Message):
            await app.send_chat_action(photo.chat.id, enums.ChatAction.UPLOAD_PHOTO)
            if photo_filter_custom(photo) is True:
                time.sleep(2)
                db_vote = sqlite3.connect("tguser.db")
                cur_vote = db_vote.cursor()
                cur_vote.execute(
                    f"UPDATE polls set second_photo = ('{photo.photo.file_id}'),"
                    f"third_photo = (Null),"
                    f"forth_photo = (Null),"
                    f"fiveth_photo = (Null),"
                    f"sixth_photo = (Null),"
                    f"seventh_photo = (Null)"
                    f"WHERE user_id = ('{photo.from_user.id}')")
                db_vote.commit()
                db_vote.close()
                await app.delete_messages(chat_id=photo.from_user.id, message_ids=photo.id)
                db_poll = DB_poll()
                return_photo = db_poll.return_photos(user_id=photo.from_user.id)
                return_second = db_poll.return_second_photo(user_id=photo.from_user.id)
                CHECK_CORRECT_PHOTOS = [
                    [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ—Ç—å—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!', callback_data='add_third_photo')],
                    [InlineKeyboardButton('–í—Å–µ –≥–æ—Ç–æ–≤–æ! –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å!', callback_data='all_right')],
                    [InlineKeyboardButton('–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!',
                                          callback_data='make_edit')],
                    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]]
                await app.send_media_group(photo.from_user.id, [
                    InputMediaPhoto(return_photo),
                    InputMediaPhoto(return_second)])
                await app.forward_messages(photo.from_user.id, photo.from_user.id,
                                           db_poll.return_poll_id(user_id=photo.from_user.id))
                await app.send_message(photo.from_user.id, "–í—ã–≥–ª—è–¥–∏—Ç –Ω–µ–ø–ª–æ—Ö–æ!",
                                       reply_markup=InlineKeyboardMarkup(CHECK_CORRECT_PHOTOS))
            else:
                time.sleep(2)
                await app.send_message(photo.from_user.id, "–ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è, "
                                                           "–Ω–æ —Å–µ–π—á–∞—Å –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –í–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüôä")

        return
    elif answer_message.data == 'add_third_photo':
        db_poll = DB_poll()
        db_poll.update_condition(stream="add_third_photo", user_id=answer_message.from_user.id)
        ADD_PHOTO = [
            [InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞', callback_data='make_edit')],
            [InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]
        ]
        reply_markup_back_home = InlineKeyboardMarkup(ADD_PHOTO)
        app.send_message(answer_message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!',
                         reply_markup=reply_markup_back_home,
                         disable_web_page_preview=True)

        @app.on_message(filters.photo & condition_filter(["add_third_photo"]) & not_media_group())
        async def save_photos(app: Client, photo: Message):
            await app.send_chat_action(photo.chat.id, enums.ChatAction.UPLOAD_PHOTO)
            if photo_filter_custom(photo) is True:
                time.sleep(2)
                db_vote = sqlite3.connect("tguser.db")
                cur_vote = db_vote.cursor()
                cur_vote.execute(
                    f"UPDATE polls set third_photo = ('{photo.photo.file_id}'),"
                    f"forth_photo = (Null),"
                    f"fiveth_photo = (Null),"
                    f"sixth_photo = (Null),"
                    f"seventh_photo = (Null)"
                    f"WHERE user_id = ('{photo.from_user.id}')")
                db_vote.commit()
                db_vote.close()
                await app.delete_messages(chat_id=photo.from_user.id, message_ids=photo.id)
                db_poll = DB_poll()
                return_photo = db_poll.return_photos(user_id=photo.from_user.id)
                return_second = db_poll.return_second_photo(user_id=photo.from_user.id)
                return_third = db_poll.return_third_photo(user_id=photo.from_user.id)
                CHECK_CORRECT_PHOTOS = [
                    [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —á–µ—Ç–≤–µ—Ä—Ç—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!',
                                          callback_data='add_forth_photo')],
                    [InlineKeyboardButton('–í—Å–µ –≥–æ—Ç–æ–≤–æ! –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å!', callback_data='all_right')],
                    [InlineKeyboardButton('–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!',
                                          callback_data='make_edit')],
                    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]]
                await app.send_media_group(photo.from_user.id, [
                    InputMediaPhoto(return_photo),
                    InputMediaPhoto(return_second),
                    InputMediaPhoto(return_third)])
                await app.forward_messages(photo.from_user.id, photo.from_user.id,
                                           db_poll.return_poll_id(user_id=photo.from_user.id))
                await app.send_message(photo.from_user.id, "–í—ã–≥–ª—è–¥–∏—Ç —Å—É–ø–µ—Ä!",
                                       reply_markup=InlineKeyboardMarkup(CHECK_CORRECT_PHOTOS))
            else:
                time.sleep(2)
                await app.send_message(photo.from_user.id, "–ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è, "
                                                           "–Ω–æ —Å–µ–π—á–∞—Å –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –í–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüôä")

        return
    elif answer_message.data == 'add_forth_photo':
        db_poll = DB_poll()
        db_poll.update_condition(stream="add_forth_photo", user_id=answer_message.from_user.id)
        ADD_PHOTO = [
            [InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞', callback_data='make_edit')],
            [InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]
        ]
        reply_markup_back_home = InlineKeyboardMarkup(ADD_PHOTO)
        app.send_message(answer_message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!',
                         reply_markup=reply_markup_back_home,
                         disable_web_page_preview=True)

        @app.on_message(filters.photo & condition_filter(["add_forth_photo"]) & not_media_group())
        async def save_photos(app: Client, photo: Message):
            await app.send_chat_action(photo.chat.id, enums.ChatAction.UPLOAD_PHOTO)
            if photo_filter_custom(photo) is True:
                time.sleep(2)
                db_vote = sqlite3.connect("tguser.db")
                cur_vote = db_vote.cursor()
                cur_vote.execute(
                    f"UPDATE polls set forth_photo = ('{photo.photo.file_id}'),"
                    f"fiveth_photo = (Null),"
                    f"sixth_photo = (Null),"
                    f"seventh_photo = (Null)"
                    f"WHERE user_id = ('{photo.from_user.id}')")
                db_vote.commit()
                db_vote.close()
                await app.delete_messages(chat_id=photo.from_user.id, message_ids=photo.id)
                db_poll = DB_poll()
                return_photo = db_poll.return_photos(user_id=photo.from_user.id)
                return_second = db_poll.return_second_photo(user_id=photo.from_user.id)
                return_third = db_poll.return_third_photo(user_id=photo.from_user.id)
                return_forth = db_poll.return_forth_photo(user_id=photo.from_user.id)
                CHECK_CORRECT_PHOTOS = [
                    [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø—è—Ç—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!', callback_data='add_fiveth_photo')],
                    [InlineKeyboardButton('–í—Å–µ –≥–æ—Ç–æ–≤–æ! –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å!', callback_data='all_right')],
                    [InlineKeyboardButton('–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!',
                                          callback_data='make_edit')],
                    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]]
                await app.send_media_group(photo.from_user.id, [
                    InputMediaPhoto(return_photo),
                    InputMediaPhoto(return_second),
                    InputMediaPhoto(return_third),
                    InputMediaPhoto(return_forth)])
                await app.forward_messages(photo.from_user.id, photo.from_user.id,
                                           db_poll.return_poll_id(user_id=photo.from_user.id))
                await app.send_message(photo.from_user.id, "–í—ã–≥–ª—è–¥–∏—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!",
                                       reply_markup=InlineKeyboardMarkup(CHECK_CORRECT_PHOTOS))
            else:
                time.sleep(2)
                await app.send_message(photo.from_user.id, "–ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è, "
                                                           "–Ω–æ —Å–µ–π—á–∞—Å –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –í–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüôä")

        return
    elif answer_message.data == 'add_fiveth_photo':
        db_poll = DB_poll()
        db_poll.update_condition(stream="add_fiveth_photo", user_id=answer_message.from_user.id)
        ADD_PHOTO = [
            [InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞', callback_data='make_edit')],
            [InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]
        ]
        reply_markup_back_home = InlineKeyboardMarkup(ADD_PHOTO)
        app.send_message(answer_message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—è—Ç—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!',
                         reply_markup=reply_markup_back_home,
                         disable_web_page_preview=True)

        @app.on_message(filters.photo & condition_filter(["add_fiveth_photo"]) & not_media_group())
        async def save_photos(app: Client, photo: Message):
            await app.send_chat_action(photo.chat.id, enums.ChatAction.UPLOAD_PHOTO)
            if photo_filter_custom(photo) is True:
                time.sleep(2)
                db_vote = sqlite3.connect("tguser.db")
                cur_vote = db_vote.cursor()
                cur_vote.execute(
                    f"UPDATE polls set fiveth_photo = ('{photo.photo.file_id}'),"
                    f"sixth_photo = (Null),"
                    f"seventh_photo = (Null)"
                    f"WHERE user_id = ('{photo.from_user.id}')")
                db_vote.commit()
                db_vote.close()
                await app.delete_messages(chat_id=photo.from_user.id, message_ids=photo.id)
                db_poll = DB_poll()
                return_photo = db_poll.return_photos(user_id=photo.from_user.id)
                return_second = db_poll.return_second_photo(user_id=photo.from_user.id)
                return_third = db_poll.return_third_photo(user_id=photo.from_user.id)
                return_forth = db_poll.return_forth_photo(user_id=photo.from_user.id)
                return_fiveth = db_poll.return_fiveth_photo(user_id=photo.from_user.id)
                CHECK_CORRECT_PHOTOS = [
                    [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —à–µ—Å—Ç—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!', callback_data='add_sixth_photo')],
                    [InlineKeyboardButton('–í—Å–µ –≥–æ—Ç–æ–≤–æ! –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å!', callback_data='all_right')],
                    [InlineKeyboardButton('–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!',
                                          callback_data='make_edit')],
                    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]]
                await app.send_media_group(photo.from_user.id, [
                    InputMediaPhoto(return_photo),
                    InputMediaPhoto(return_second),
                    InputMediaPhoto(return_third),
                    InputMediaPhoto(return_forth),
                    InputMediaPhoto(return_fiveth)])
                await app.forward_messages(photo.from_user.id, photo.from_user.id,
                                           db_poll.return_poll_id(user_id=photo.from_user.id))
                await app.send_message(photo.from_user.id, "–í—ã–≥–ª—è–¥–∏—Ç —è—Å–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ!",
                                       reply_markup=InlineKeyboardMarkup(CHECK_CORRECT_PHOTOS))
            else:
                time.sleep(2)
                await app.send_message(photo.from_user.id, "–ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è, "
                                                           "–Ω–æ —Å–µ–π—á–∞—Å –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –í–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüôä")

        return
    elif answer_message.data == 'add_sixth_photo':
        db_poll = DB_poll()
        db_poll.update_condition(stream="add_sixth_photo", user_id=answer_message.from_user.id)
        ADD_PHOTO = [
            [InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞', callback_data='make_edit')],
            [InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]
        ]
        reply_markup_back_home = InlineKeyboardMarkup(ADD_PHOTO)
        app.send_message(answer_message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —à–µ—Å—Ç—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!',
                         reply_markup=reply_markup_back_home,
                         disable_web_page_preview=True)

        @app.on_message(filters.photo & condition_filter(["add_sixth_photo"]) & not_media_group())
        async def save_photos(app: Client, photo: Message):
            await app.send_chat_action(photo.chat.id, enums.ChatAction.UPLOAD_PHOTO)
            if photo_filter_custom(photo) is True:
                time.sleep(2)
                db_vote = sqlite3.connect("tguser.db")
                cur_vote = db_vote.cursor()
                cur_vote.execute(
                    f"UPDATE polls set sixth_photo = ('{photo.photo.file_id}'),"
                    f"seventh_photo = (Null)"
                    f"WHERE user_id = ('{photo.from_user.id}')")
                db_vote.commit()
                db_vote.close()
                await app.delete_messages(chat_id=photo.from_user.id, message_ids=photo.id)
                db_poll = DB_poll()
                return_photo = db_poll.return_photos(user_id=photo.from_user.id)
                return_second = db_poll.return_second_photo(user_id=photo.from_user.id)
                return_third = db_poll.return_third_photo(user_id=photo.from_user.id)
                return_forth = db_poll.return_forth_photo(user_id=photo.from_user.id)
                return_fiveth = db_poll.return_fiveth_photo(user_id=photo.from_user.id)
                return_sixth = db_poll.return_sixth_photo(user_id=photo.from_user.id)
                CHECK_CORRECT_PHOTOS = [
                    [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!',
                                          callback_data='add_seventh_photo')],
                    [InlineKeyboardButton('–í—Å–µ –≥–æ—Ç–æ–≤–æ! –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å!', callback_data='all_right')],
                    [InlineKeyboardButton('–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!',
                                          callback_data='make_edit')],
                    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]]
                await app.send_media_group(photo.from_user.id, [
                    InputMediaPhoto(return_photo),
                    InputMediaPhoto(return_second),
                    InputMediaPhoto(return_third),
                    InputMediaPhoto(return_forth),
                    InputMediaPhoto(return_fiveth),
                    InputMediaPhoto(return_sixth)
                ])
                await app.forward_messages(photo.from_user.id, photo.from_user.id,
                                           db_poll.return_poll_id(user_id=photo.from_user.id))
                await app.send_message(photo.from_user.id, "–í—ã–≥–ª—è–¥–∏—Ç, –∫–∞–∫ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ–µ!",
                                       reply_markup=InlineKeyboardMarkup(CHECK_CORRECT_PHOTOS))
            else:
                time.sleep(2)
                await app.send_message(photo.from_user.id, "–ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è, "
                                                           "–Ω–æ —Å–µ–π—á–∞—Å –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –í–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüôä")

        return
    elif answer_message.data == 'add_seventh_photo':
        db_poll = DB_poll()
        db_poll.update_condition(stream="add_seventh_photo", user_id=answer_message.from_user.id)
        ADD_PHOTO = [
            [InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞', callback_data='make_edit')],
            [InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]
        ]
        reply_markup_back_home = InlineKeyboardMarkup(ADD_PHOTO)
        app.send_message(answer_message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!',
                         reply_markup=reply_markup_back_home,
                         disable_web_page_preview=True)

        @app.on_message(filters.photo & condition_filter(["add_seventh_photo"]) & not_media_group())
        async def save_photos(app: Client, photo: Message):
            await app.send_chat_action(photo.chat.id, enums.ChatAction.UPLOAD_PHOTO)
            if photo_filter_custom(photo) is True:
                time.sleep(2)
                db_vote = sqlite3.connect("tguser.db")
                cur_vote = db_vote.cursor()
                cur_vote.execute(
                    f"UPDATE polls set seventh_photo = ('{photo.photo.file_id}')"
                    f"WHERE user_id = ('{photo.from_user.id}')")
                db_vote.commit()
                db_vote.close()
                await app.delete_messages(chat_id=photo.from_user.id, message_ids=photo.id)
                db_poll = DB_poll()
                return_photo = db_poll.return_photos(user_id=photo.from_user.id)
                return_second = db_poll.return_second_photo(user_id=photo.from_user.id)
                return_third = db_poll.return_third_photo(user_id=photo.from_user.id)
                return_forth = db_poll.return_forth_photo(user_id=photo.from_user.id)
                return_fiveth = db_poll.return_fiveth_photo(user_id=photo.from_user.id)
                return_sixth = db_poll.return_sixth_photo(user_id=photo.from_user.id)
                return_seventh = db_poll.return_seventh_photo(user_id=photo.from_user.id)
                CHECK_CORRECT_PHOTOS = [
                    [InlineKeyboardButton('–í—Å–µ –≥–æ—Ç–æ–≤–æ! –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å!', callback_data='all_right')],
                    [InlineKeyboardButton('–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!',
                                          callback_data='make_edit')],
                    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')]]
                await app.send_media_group(photo.from_user.id, [
                    InputMediaPhoto(return_photo),
                    InputMediaPhoto(return_second),
                    InputMediaPhoto(return_third),
                    InputMediaPhoto(return_forth),
                    InputMediaPhoto(return_fiveth),
                    InputMediaPhoto(return_sixth),
                    InputMediaPhoto(return_seventh)
                ])
                await app.forward_messages(photo.from_user.id, photo.from_user.id,
                                           db_poll.return_poll_id(user_id=photo.from_user.id))
                await app.send_message(photo.from_user.id, "–í—ã–≥–ª—è–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ –∏ —è—Å–Ω–æ!",
                                       reply_markup=InlineKeyboardMarkup(CHECK_CORRECT_PHOTOS))
            else:
                time.sleep(2)
                await app.send_message(photo.from_user.id, "–ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è, "
                                                           "–Ω–æ —Å–µ–π—á–∞—Å –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –í–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüôä")

        return
    elif answer_message.data == 'make_edit':
        db_poll = DB_poll()
        db_poll.update_condition(stream="command_poll", user_id=answer_message.from_user.id)
        app.send_message(chat_id=answer_message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ç–µ–∫—Å—Ç '
                                                                   '–í–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã, —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–æ–∫!')
        return
    return


@app.on_message(filters.new_chat_members)
async def welcome_group(app: Client, message: Message):
    time = datetime.datetime.now() - datetime.timedelta(days=1)
    time = time.strftime("%Y%m%d")
    db_vote = sqlite3.connect("tguser.db")
    cur_vote = db_vote.cursor()
    cur_vote.execute(f"INSERT OR IGNORE INTO polls (user_id) VALUES ('{message.from_user.id}')")
    db_vote.commit()
    cur_vote.execute(f"UPDATE polls SET check_time = ('{time}') WHERE user_id = ('{message.from_user.id}');")
    db_vote.commit()
    db_vote.close()
    reply_buttons = [
        ['/start']
    ]
    reply_keyboard = ReplyKeyboardMarkup(reply_buttons, one_time_keyboard=True, resize_keyboard=True)
    await message.reply_text(WELCOME_MESSAGE, reply_markup=reply_keyboard)
    await app.send_photo(message.chat.id,
                         'AgACAgIAAxkDAAKw3WPfpy7a5YEsMRzQiOXsc6drUyq7AALIxjEbuNIBS3f-tVfPSM5uAAgBAAMCAANtAAceBA')


# –±–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–π–¥–∏ —Ñ–∞–π–ª–æ–≤
# @app.on_message(filters.audio & filters.private)
# async def get_id_audio(app: Client, message: Message):
#     await message.reply(message.audio.file_id)
#
#
# @app.on_message(filters.photo & filters.me, group=1)
# async def get_id_photo(app: Client, message: Message):
#     await message.reply(message.photo.file_id)



print('I`m working')
app.run()
